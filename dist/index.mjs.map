{"version":3,"sources":["../src/constants/constants.ts","../src/dto/user.interface.ts","../src/dto/patch-user.interface.ts","../src/dto/reset-password.ts","../src/dto/confirm-forgot-password.ts","../src/dto/residential.interface.ts","../src/dto/remote-gate-log.interface.ts","../src/dto/remote-gate.interface.ts","../src/dto/user-summary.interface.ts","../src/dto/invoice.interface.ts","../src/dto/payment-method.interface.ts","../src/dto/invoice-payment-intent.interface.ts","../src/dto/video-call-token.interface.ts","../src/dto/automatic-charge.ts","../src/dto/invitation.ts","../src/enum/invitation-duration.enum.ts","../src/enum/invitation-type.enum.ts","../src/dto/basic-user-info.ts","../src/dto/guest.ts","../src/enum/role.enum.ts","../src/dto/project.ts","../src/dto/action-log.ts","../src/dto/notification.ts"],"sourcesContent":["export const PHONE_REGEX = /^(\\+[1-9]{2})\\d{10}$/;","import { z } from \"zod\";\nimport { PHONE_REGEX } from \"../constants/constants\";\n\nexport interface User {\n    sub?: string;\n    username?: string;\n    name: string;\n    email: string;\n    email_verified?: boolean;\n    phone_number?: string;\n    phone_number_verified?: boolean;\n    firstLogin: boolean;\n    houseNumber: string;\n    role: \"houseOwner\" | \"houseRelated\" | \"helpDesk\" | \"admin\" | \"tenant\";\n    street: string;\n    residentialId: string;\n    houseOwnerSub?: string;\n    currentPinAccess?: string;\n    stripeCustomerId?: string; // Optional field for Stripe customer ID\n    iaBehaviour?: \"formal\" | \"friendly\" | \"funny\",\n    avatarUrl?: string; // Optional field for avatar URL\n    enabled: boolean;\n    accessEnabled: boolean;\n    fcmToken?: string; // Optional field for FCM token\n}\n\nexport const userSchema = z.object({\n    sub: z.string().uuid().optional(),\n    username: z.string().optional(),\n    name: z.string(),\n    email: z.string().email(),\n    email_verified: z.boolean().optional(),\n    phone_number: z.string().regex(PHONE_REGEX).optional(),\n    phone_number_verified: z.boolean().optional(),\n    firstLogin: z.boolean(),\n    houseNumber: z.string(),\n    role: z.enum([\"houseOwner\", \"houseRelated\", \"helpDesk\", \"admin\", \"tenant\"]),\n    street: z.string(),\n    residentialId: z.string(),\n    houseOwnerSub: z.string().uuid().optional(),\n    currentPinAccess: z.string().length(4, \"Current PIN must be 4 digits length\").optional(),\n    stripeCustomerId: z.string().optional(), // Optional field for Stripe customer ID\n    iaBehaviour: z.enum([\"formal\", \"friendly\", \"funny\"]).optional(),\n    avatarUrl: z.string().optional(), // Optional field for avatar URL\n    isUserDebtor: z.boolean().optional(), // Optional field to indicate if the user is a debtor\n    enabled: z.boolean(),\n    accessEnabled: z.boolean(),\n    fcmToken: z.string().optional(), // Optional field for FCM token\n}).strict();\n\nexport type UserType = z.infer<typeof userSchema>;\n\nexport const userSchemaPartial = userSchema.partial();\nexport type UserTypePartial = z.infer<typeof userSchemaPartial>;","import { z } from \"zod\";\nimport { PHONE_REGEX } from \"../constants/constants\";\n\nexport interface PatchUser {\n    residentialId?: string; // Optional field for residential ID\n    name?: string;\n    email?: string;\n    phone_number?: string;\n    firstLogin?: boolean;\n    houseNumber?: string;\n    street?: string;\n    currentPinAccess?: string;\n    iaBehaviour?: \"formal\" | \"friendly\" | \"funny\",\n    avatarUrl?: string; // Optional field for avatar URL\n    role?: \"houseOwner\" | \"houseRelated\" | \"helpDesk\" | \"admin\" | \"tenant\"; // Optional field for user role\n}\n\nexport const patchUserSchema = z.object({\n    residentialId: z.string().optional(), // Optional field for residential ID\n    name: z.string().optional(),\n    email: z.string().email().optional(),\n    phone_number: z.string().regex(PHONE_REGEX).optional(),\n    firstLogin: z.boolean().optional(),\n    houseNumber: z.string().optional(),\n    street: z.string().optional(),\n    currentPinAccess: z.string().length(4, \"Current PIN must be 4 digits length\").optional(),\n    iaBehaviour: z.enum([\"formal\", \"friendly\", \"funny\"]).optional(),\n    avatarUrl: z.string().optional(), // Optional field for avatar URL\n    role: z.enum([\"houseOwner\", \"houseRelated\", \"helpDesk\", \"admin\", \"tenant\"]).optional() // Optional field for user role\n}).strict();\n\nexport type PatchUserType = z.infer<typeof patchUserSchema>;","import z from \"zod\";\n\nexport interface ResetPassword {\n    username: string;\n}\n\nexport const resetPasswordSchema = z.object({\n    username: z.string().min(1, \"Username is required\"),\n});\n\nexport type ResetPasswordType = z.infer<typeof resetPasswordSchema>;","import z from \"zod\";\n\nexport interface ConfirmForgotPassword {\n    username: string;\n    newPassword: string;\n    confirmationCode: string;\n}\n\nexport const confirmForgotPasswordSchema = z.object({\n    username: z.string(),\n    newPassword: z.string(),\n    confirmationCode: z.string(),\n});\n\nexport type ConfirmForgotPasswordType = z.infer<typeof confirmForgotPasswordSchema>;","/**\n * Residential interface represents a residential area where remote devices are installed,\n * and where users can live or have a house.\n * \n * @interface Residential\n */\n\nimport z from \"zod\";\n\nexport interface Residential {\n    _id: string;\n    name: string;\n    address: string;\n    city: string;\n    state: string;\n    country: string;\n    postalCode: string;\n    contactNumber?: string;\n    status: \"active\" | \"inactive\";\n    topicName: string;\n    monthlyPaymentStripePriceId?: string;\n    monthlyPaymentAmount: string;\n    bankBanxicoKey?: string; // Optional field for Banxico key\n    bankCLABE?: string; // Optional field for bank account number\n}\n\nexport const residentialSchema = z.object({\n    _id: z.string().optional(),\n    name: z.string(),\n    address: z.string(),\n    city: z.string(),\n    state: z.string(),\n    country: z.string(),\n    postalCode: z.string(),\n    contactNumber: z.string().optional(),\n    status: z.enum([\"active\", \"inactive\"]),\n    topicName: z.string(),\n    monthlyPaymentStripePriceId: z.string().optional(),\n    monthlyPaymentAmount: z.string(),\n    bankBanxicoKey: z.string().optional(), // Optional field for Banxico key\n    bankCLABE: z.string().optional(), // Optional field for bank account number\n}).strict();\n\nexport type ResidentialType = z.infer<typeof residentialSchema>;","/**\n * RemoteOpeningAction interface represents an action that will be performed on a remote device,\n * such as opening or closing a gate, and includes metadata about the action.\n * Also can be used to log actions performed by users or systems.\n * \n * @interface RemoteGateLog\n */\n\nimport z from \"zod\";\n\nexport interface RemoteGateLog {\n    remoteGateId: string;\n    source: \"app\" | \"totem\",\n    action: \"open\" | \"enable\" | \"disable\" | \"create\" | \"delete\" | \"update\";\n    timestamp: string; // ISO 8601 format\n    userSub: string; // If the action is performed by a user\n    reason?: string; // Optional, for logging purposes\n    additionalInfo?: any; // Optional, for any extra information\n}\n\nexport const remoteGateLogSchema = z.object({\n    remoteGateId: z.string().optional(),\n    source: z.enum([\"app\", \"totem\"]),\n    action: z.enum([\"open\", \"enable\", \"disable\", \"create\", \"delete\", \"update\"]),\n    timestamp: z.string().refine((val) => !isNaN(Date.parse(val)), {\n        message: \"Invalid timestamp format, must be ISO 8601\",\n    }),\n    userSub: z.string().uuid(),\n    reason: z.string().optional(),\n    additionalInfo: z.any().optional(),\n}).strict();\n\nexport type RemoteGateLogType = z.infer<typeof remoteGateLogSchema>;","/**\n * RemoteDevice Interface represents a gate that can be controlled remotely,\n * and are installed physically at the entrance or exit of a residential area.\n * \n * @interface RemoteGate\n */\n\nimport { z } from \"zod\";\n\nexport interface RemoteGate {\n    _id?: string;\n    residentialId: string;\n    name: string;\n    type: \"entrance\" | \"exit\";\n    thingName: string;\n    enabled?: boolean; // Optional field to indicate if the gate is enabled\n}\n\nexport const remoteGateSchema = z.object({\n    _id: z.string().optional(),\n    residentialId: z.string(),\n    name: z.string(),\n    type: z.enum([\"entrance\", \"exit\"]),\n    thingName: z.string(),\n    enabled: z.boolean().optional(), // Optional field to indicate if the gate is enabled\n}).strict();\n\nexport type RemoteGateType = z.infer<typeof remoteGateSchema>;","import z from \"zod\";\nimport { RemoteGate, remoteGateSchema } from \"./remote-gate.interface\";\n\nexport interface UserSummary {\n    remoteGates: RemoteGate[];\n    currentPinAccess: string;\n    topicName: string;\n    // TODO: Add payment summary object\n}\n\nexport const userSummarySchema = z.object({\n    remoteGates: z.array(remoteGateSchema),\n    currentPinAccess: z.string().length(4, \"Current PIN must be 4 digits length\"),\n    topicName: z.string().min(1, \"Topic name cannot be empty\"),\n}).strict();\n\nexport type UserSummaryType = z.infer<typeof userSummarySchema>;","import { z } from \"zod\";\n\nexport interface Invoice {\n    id: string;\n    status: \"draft\" | \"open\" | \"paid\" | \"uncollectible\" | \"void\"; // Comes from https://docs.stripe.com/api/invoices/object?api-version=2025-05-28.basil#invoice_object-status\n    created: number; // Unix timestamp in that the invoice was created\n    total: number; // Total amount after discounts and taxes\n    ammount_remaining: number; // Amount due after discounts and taxes\n    customerId: string; // Customer ID from Stripe\n    description: string; // Optional description of the invoice\n    invoice_pdf?: string; // URL to the invoice PDF\n    collection_method: \"charge_automatically\" | \"send_invoice\"; // How the invoice will be paid\n    due_date?: number; // Optional, only if collection_method is \"send_invoice\"\n    days_until_due?: number; // Optional, only if collection_method is \"send_invoice\"\n    monthName: string; // Name of the month for which the invoice is generated\n    year: number; // Year for which the invoice is generated\n    paid_amount?: number; // Optional, amount paid by the customer\n}\n\nexport const invoiceSchema = z.object({\n    id: z.string(),\n    status: z.enum([\"draft\", \"open\", \"paid\", \"uncollectible\", \"void\"]),\n    created: z.number(),\n    total: z.number(),\n    ammount_remaining: z.number(),\n    customerId: z.string(),\n    description: z.string(),\n    invoice_pdf: z.string().url().optional(),\n    collection_method: z.enum([\"charge_automatically\", \"send_invoice\"]),\n    due_date: z.number().optional(), // Optional, only if collection_method is \"send_invoice\"\n    days_until_due: z.number().optional(), // Optional, only if collection_method is \"send_invoice\"\n    monthName: z.string(),\n    year: z.number().min(2000).max(2100), // Year must be a valid year\n    paid_amount: z.number().optional(), // Optional, amount paid by the customer\n}).strict();\n\nexport type InvoiceType = z.infer<typeof invoiceSchema>;","import { z } from \"zod\";\n\nexport interface PaymentMethod {\n    id: string; // Unique identifier for the payment method\n    type: \"card\" | \"bank_account\" | \"paypal\"; // Type of payment method\n    brand?: string; // Brand of the card (e.g., Visa, MasterCard) if applicable\n    last4?: string; // Last four digits of the card or bank account number\n    exp_month?: number; // Expiration month of the card if applicable\n    exp_year?: number; // Expiration year of the card if applicable\n}\n\nexport const paymentMethodSchema = z.object({\n    id: z.string(),\n    type: z.enum([\"card\", \"bank_account\", \"paypal\"]),\n    brand: z.string().optional(), // Optional, only for card type\n    last4: z.string().optional(), // Optional, only for card or bank account type\n    exp_month: z.number().optional(), // Optional, only for card type\n    exp_year: z.number().optional(), // Optional, only for card type\n}).strict();\n\nexport type PaymentMethodType = z.infer<typeof paymentMethodSchema>;","import { z } from \"zod\";\n\nexport interface InvoicePaymentIntent {\n    invoiceId: string;\n    paymentMethodId: string;\n}\n\nexport const invoicePaymentIntentSchema = z.object({\n    invoiceId: z.string(),\n    paymentMethodId: z.string().min(1, \"Payment method ID is required\"),\n}).strict();\n\nexport type InvoicePaymentIntentType = z.infer<typeof invoicePaymentIntentSchema>;","import { z } from \"zod\";\n\nexport interface VideoCallToken {\n  token: string;\n  roomName: string;\n}\n\nexport const videoCallTokenSchema = z.object({\n  token: z.string(),\n  roomName: z.string(),\n});\n\nexport type VideoCallTokenType = z.infer<typeof videoCallTokenSchema>;","import { z } from \"zod\";\n\nexport interface AutomaticCharge {\n    customerId: string;\n    collectionMethod: \"charge_automatically\" | \"send_invoice\";\n    paymentMethodId?: string;\n}\n\nexport const automaticChargeSchema = z.object({\n    customerId: z.string(),\n    collectionMethod: z.enum([\"charge_automatically\", \"send_invoice\"]),\n    paymentMethodId: z.string().optional(),\n}).strict();\n\nexport type AutomaticChargeType = z.infer<typeof automaticChargeSchema>;","import { z } from \"zod\";\nimport { InvitationDurationEnum, invitationDurationEnumSchema } from \"../enum/invitation-duration.enum\";\nimport { InvitationTypeEnum, invitationTypeEnumSchema } from \"../enum/invitation-type.enum\";\nimport { BasicUserTypeEnum, basicUserTypeEnumSchema } from \"./basic-user-info\";\n\nexport interface Invitation {\n    _id?: string;\n    userId?: string; // User ID of the person who sent the invitation, this can be the guest ID or the user Sub\n    userType?: BasicUserTypeEnum,\n    type: InvitationTypeEnum;\n    duration: InvitationDurationEnum;\n    isoDueDate: string;\n    used?: boolean; // Indicates if the invitation has been used\n    oneTimeUse: boolean; // Indicates if the invitation can only be used once\n}\n\nexport const invitationSchema = z.object({\n    _id: z.string().optional(),\n    userId: z.string().optional(),\n    userType: basicUserTypeEnumSchema.optional(),\n    type: invitationTypeEnumSchema,\n    duration: invitationDurationEnumSchema,\n    isoDueDate: z.string(),\n    used: z.boolean().optional(),\n    oneTimeUse: z.boolean(),\n});\n\nexport type InvitationType = z.infer<typeof invitationSchema>;\n\nexport const invitationSchemaToInterface = (data: InvitationType): Invitation => {\n    return {\n        _id: data._id,\n        userId: data.userId,\n        userType: data.userType,\n        type: data.type,\n        duration: data.duration,\n        isoDueDate: data.isoDueDate,\n        used: data.used,\n        oneTimeUse: data.oneTimeUse,\n    };\n}","import z from \"zod\";\n\nexport const enum InvitationDurationEnum {\n  ONE_HOUR = '1 hour',\n  TWO_HOURS = '2 hours',\n  FOUR_HOURS = '4 hours',\n  SIX_HOURS = '6 hours',\n  TWELVE_HOURS = '12 hours',\n  ONE_DAY = '1 day',\n  TWO_DAYS = '2 days',\n  THREE_DAYS = '3 days',\n  ONE_WEEK = '1 week',\n  TWO_WEEKS = '2 weeks',\n  ONE_MONTH = '1 month',\n  THREE_MONTHS = '3 months',\n}\n\nexport const invitationDurationEnumSchema = z.enum([\n    InvitationDurationEnum.ONE_HOUR,\n    InvitationDurationEnum.TWO_HOURS,\n    InvitationDurationEnum.FOUR_HOURS,\n    InvitationDurationEnum.SIX_HOURS,\n    InvitationDurationEnum.TWELVE_HOURS,\n    InvitationDurationEnum.ONE_DAY,\n    InvitationDurationEnum.TWO_DAYS,\n    InvitationDurationEnum.THREE_DAYS,\n    InvitationDurationEnum.ONE_WEEK,\n    InvitationDurationEnum.TWO_WEEKS,\n    InvitationDurationEnum.ONE_MONTH,\n    InvitationDurationEnum.THREE_MONTHS,\n]);","import { z } from \"zod\";\n\nexport const enum InvitationTypeEnum {\n    QR = \"qr\",\n    PIN = \"pin\",\n}\n\nexport const invitationTypeEnumSchema = z.enum([\n    InvitationTypeEnum.QR,\n    InvitationTypeEnum.PIN,\n]);","import { z } from \"zod\";\n\nexport const enum BasicUserTypeEnum {\n     REGISTERED_USER = \"registeredUser\",\n     GUEST_USER = \"guestUser\",\n}\n\nexport const basicUserTypeEnumSchema = z.enum([BasicUserTypeEnum.REGISTERED_USER, BasicUserTypeEnum.GUEST_USER]);\n\nexport interface BasicUserInfo {\n  id: string;\n  username: string;\n  name: string;\n  avatarUrl: string;\n  type: BasicUserTypeEnum;\n}\n\nexport const BasicUserInfoSchema = z.object({\n  id: z.string().uuid(),\n  username: z.string().min(1),\n  name: z.string(),\n  avatarUrl: z.string().url(),\n  type: basicUserTypeEnumSchema,\n}).strict();\n\nexport type BasicUserInfoType = z.infer<typeof BasicUserInfoSchema>;","import { z } from \"zod\";\n\nexport interface Guest {\n    _id?: string; // Unique identifier for the guest\n    userSub: string; // User ID of the guest (usually the host)\n    name: string; // Name of the guest\n    avatarUrl: string; // URL of the guest's avatar image\n    isoCreatedOn: string; // Date when the guest was created\n}\n\nexport const guestSchema = z.object({\n    _id: z.string().optional(),\n    userSub: z.string().uuid(),\n    name: z.string(),\n    avatarUrl: z.string().url(),\n    isoCreatedOn: z.string().datetime(),\n});\n\nexport type GuestType = z.infer<typeof guestSchema>;","export enum UserRoleEnum {\n    HOUSE_OWNER = \"houseOwner\",\n    HOUSE_RELATED = \"houseRelated\",\n    HELP_DESK = \"helpDesk\",\n    ADMIN = \"admin\",\n    TENANT = \"tenant\",\n}","import { z } from \"zod\";\n\nexport interface ProjectUpdate {\n    updateText: string;\n    isoCreatedAt: string;\n}\n\nexport interface Project {\n    _id?: string;\n    residentialId: string;\n    title: string;\n    description: string;\n    progress: number;\n    isoCreatedAt: string;\n    updatedAt?: string;\n    lastUpdateText?: string;\n    isFinished: boolean;\n    isArchived?: boolean;\n    updates?: ProjectUpdate[];\n}\n\nexport const projectUpdateSchema = z.object({\n    updateText: z.string(),\n    isoCreatedAt: z.string(),\n});\n\nexport const projectSchema = z.object({\n    _id: z.string().optional(),\n    residentialId: z.string(),\n    title: z.string(),\n    description: z.string(),\n    progress: z.number().min(0).max(1),\n    isoCreatedAt: z.string(),\n    updatedAt: z.string().optional(),\n    lastUpdateText: z.string().optional(),\n    isFinished: z.boolean(),\n    isArchived: z.boolean().optional(),\n    updates: z.array(projectUpdateSchema).optional(),\n});\n\nexport type ProjectUpdateType = z.infer<typeof projectUpdateSchema>;\nexport type ProjectType = z.infer<typeof projectSchema>;","import { z } from \"zod\";\n\nexport interface ActionLog {\n    residentialId?: string; // ID of the residential unit where the action took place\n    module: string; // Description of the action performed\n    httpMethod: string; // HTTP method used for the action (e.g., GET, POST)\n    userId: string; // ID of the user who performed the action\n    isoTimestamp: string; // Timestamp of when the action was performed\n    details?: string; // Optional field for additional details about the action\n}\n\nexport const actionLogSchema = z.object({\n    residentialId: z.string().optional(),\n    module: z.string(),\n    httpMethod: z.string(),\n    userId: z.string(),\n    isoTimestamp: z.string().datetime({ offset: false }),\n    details: z.string().optional(),\n});\n\nexport type ActionLogType = z.infer<typeof actionLogSchema>;","import { z } from \"zod\";\n\nexport interface Notification {\n    _id?: string,\n    username?: string, // Optional field to associate the notification with a user\n    residentialId?: string, // Optional field to associate the notification with a residential\n    isGlobal?: boolean, // Optional field to indicate if the notification is global\n    title: string,\n    content: string,\n    url: string,\n    isoCreatedAt: string,\n    status: \"creating\" | \"sending\" | \"ok\" | \"error\",\n    message: string, // field for additional message\n}\n\nexport const notificationSchema = z.object({\n    _id: z.string().optional(),\n    username: z.string().optional(), // Optional field to associate the notification with a user\n    residentialId: z.string().optional(), // Optional field to associate the notification with a residential\n    isGlobal: z.boolean().optional(), // Optional field to indicate if the notification is global\n    title: z.string(),\n    content: z.string().max(250, \"Content must be at most 500 characters long\"),\n    url: z.string(),\n    isoCreatedAt: z.string().datetime({ offset: false }),\n    status: z.enum([\"creating\", \"sending\", \"ok\", \"error\"]).default(\"creating\"),\n    message: z.string(), // field for additional message\n}).strict();\n\nexport type NotificationType = z.infer<typeof notificationSchema>;"],"mappings":"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","names":["z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","InvitationDurationEnum","z","InvitationTypeEnum","z","BasicUserTypeEnum","z","z","UserRoleEnum","z","z","z"]}