{"version":3,"sources":["../src/index.ts","../src/constants/constants.ts","../src/dto/user.interface.ts","../src/dto/patch-user.interface.ts","../src/dto/residential.interface.ts","../src/dto/remote-gate-log.interface.ts","../src/dto/remote-gate.interface.ts","../src/dto/user-summary.interface.ts","../src/dto/invoice.interface.ts","../src/dto/payment-method.interface.ts","../src/dto/invoice-payment-intent.interface.ts","../src/dto/video-call-token.interface.ts","../src/dto/automatic-charge.ts","../src/enum/invitation-duration.enum.ts","../src/enum/invitation-type.enum.ts","../src/dto/basic-user-info.ts","../src/dto/guest.ts","../src/enum/role.enum.ts"],"sourcesContent":["export { ObjectId } from \"mongodb\";\n\nexport * from \"./constants/constants\";\n\nexport * from \"./dto/user.interface\";\nexport * from \"./dto/patch-user.interface\"\nexport * from \"./dto/register-user-response.interface\";\nexport * from \"./dto/residential.interface\";\nexport * from \"./dto/remote-gate-log.interface\";\nexport * from \"./dto/remote-gate.interface\";\nexport * from \"./dto/user-summary.interface\";\nexport * from \"./dto/user-balance.interface\";\nexport * from \"./dto/invoice.interface\";\nexport * from \"./dto/payment-method.interface\";\nexport * from \"./dto/invoice-payment-intent.interface\"\nexport * from \"./dto/video-call-token.interface\";\nexport * from \"./dto/payment-intent-response\";\nexport * from \"./dto/automatic-charge\";\nexport * from \"./dto/automatic-charge-summary-response\";\n\nexport * from \"./enum/invitation-duration.enum\";\nexport * from \"./enum/invitation-type.enum\";\nexport * from \"./dto/invitation\";\nexport * from \"./dto/invitation-ui-type\";\n\nexport * from \"./dto/basic-user-info\";\n\nexport * from \"./dto/guest\";\n\nexport * from \"./enum/role.enum\";","export const PHONE_REGEX = /^(\\+[1-9]{2})\\d{10}$/;\nexport const MONGODB_ID_REGEX = /^[a-f\\d]{24}$/i;","import { z } from \"zod\";\nimport { PHONE_REGEX } from \"../constants/constants\";\n\nexport interface User {\n    sub?: string;\n    username?: string;\n    name: string;\n    email: string;\n    email_verified?: boolean;\n    phone_number?: string;\n    phone_number_verified?: boolean;\n    firstLogin: boolean;\n    houseNumber: string;\n    role: \"houseOwner\" | \"houseRelated\" | \"helpDesk\" | \"admin\";\n    street: string;\n    residentialId: string;\n    houseOwnerSub?: string;\n    currentPinAccess?: string;\n    stripeCustomerId?: string; // Optional field for Stripe customer ID\n    iaBehaviour?: \"formal\" | \"friendly\" | \"funny\",\n    avatarUrl?: string; // Optional field for avatar URL\n}\n\nexport const userSchema = z.object({\n    sub: z.string().uuid().optional(),\n    username: z.string().optional(),\n    name: z.string(),\n    email: z.string().email(),\n    email_verified: z.boolean().optional(),\n    phone_number: z.string().regex(PHONE_REGEX).optional(),\n    phone_number_verified: z.boolean().optional(),\n    firstLogin: z.boolean(),\n    houseNumber: z.string(),\n    role: z.enum([\"houseOwner\", \"houseRelated\", \"helpDesk\", \"admin\"]),\n    street: z.string(),\n    residentialId: z.string(),\n    houseOwnerSub: z.string().uuid().optional(),\n    currentPinAccess: z.string().length(4, \"Current PIN must be 4 digits length\").optional(),\n    stripeCustomerId: z.string().optional(), // Optional field for Stripe customer ID\n    iaBehaviour: z.enum([\"formal\", \"friendly\", \"funny\"]).optional(),\n    avatarUrl: z.string().optional(), // Optional field for avatar URL\n}).strict();\n\nexport type UserType = z.infer<typeof userSchema>;","import { z } from \"zod\";\nimport { PHONE_REGEX } from \"../constants/constants\";\n\nexport interface PatchUser {\n    name?: string;\n    email?: string;\n    phone_number?: string;\n    firstLogin?: boolean;\n    houseNumber?: string;\n    street?: string;\n    currentPinAccess?: string;\n    iaBehaviour?: \"formal\" | \"friendly\" | \"funny\",\n    avatarUrl?: string; // Optional field for avatar URL\n}\n\nexport const patchUserSchema = z.object({\n    name: z.string().optional(),\n    email: z.string().email().optional(),\n    phone_number: z.string().regex(PHONE_REGEX).optional(),\n    firstLogin: z.boolean().optional(),\n    houseNumber: z.string().optional(),\n    street: z.string().optional(),\n    currentPinAccess: z.string().length(4, \"Current PIN must be 4 digits length\").optional(),\n    iaBehaviour: z.enum([\"formal\", \"friendly\", \"funny\"]).optional(),\n    avatarUrl: z.string().optional(), // Optional field for avatar URL\n}).strict();\n\nexport type PatchUserType = z.infer<typeof patchUserSchema>;","/**\n * Residential interface represents a residential area where remote devices are installed,\n * and where users can live or have a house.\n * \n * @interface Residential\n */\n\nimport z from \"zod\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface Residential {\n    _id: string;\n    name: string;\n    address: string;\n    city: string;\n    state: string;\n    country: string;\n    postalCode: string;\n    contactNumber?: string;\n    status: \"active\" | \"inactive\";\n    topicName: string;\n    monthlyPaymentStripePriceId?: string;\n    monthlyPaymentAmount: string;\n}\n\nexport const residentialSchema = z.object({\n    _id: z.string().transform(val => new ObjectId(val)).optional(),\n    name: z.string(),\n    address: z.string(),\n    city: z.string(),\n    state: z.string(),\n    country: z.string(),\n    postalCode: z.string(),\n    contactNumber: z.string().optional(),\n    status: z.enum([\"active\", \"inactive\"]),\n    topicName: z.string(),\n    monthlyPaymentStripePriceId: z.string().optional(),\n    monthlyPaymentAmount: z.string(),\n}).strict();\n\nexport type ResidentialType = z.infer<typeof residentialSchema>;","/**\n * RemoteOpeningAction interface represents an action that will be performed on a remote device,\n * such as opening or closing a gate, and includes metadata about the action.\n * Also can be used to log actions performed by users or systems.\n * \n * @interface RemoteGateLog\n */\n\nimport z from \"zod\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface RemoteGateLog {\n    remoteGateId: string;\n    source: \"app\" | \"totem\",\n    action: \"open\" | \"enable\" | \"disable\" | \"create\" | \"delete\" | \"update\";\n    timestamp: string; // ISO 8601 format\n    userSub: string; // If the action is performed by a user\n    reason?: string; // Optional, for logging purposes\n    additionalInfo?: any; // Optional, for any extra information\n}\n\nexport const remoteGateLogSchema = z.object({\n    remoteGateId: z.string().transform(val => new ObjectId(val)).optional(),\n    source: z.enum([\"app\", \"totem\"]),\n    action: z.enum([\"open\", \"enable\", \"disable\", \"create\", \"delete\", \"update\"]),\n    timestamp: z.string().refine((val) => !isNaN(Date.parse(val)), {\n        message: \"Invalid timestamp format, must be ISO 8601\",\n    }),\n    userSub: z.string().uuid(),\n    reason: z.string().optional(),\n    additionalInfo: z.any().optional(),\n}).strict();\n\nexport type RemoteGateLogType = z.infer<typeof remoteGateLogSchema>;","/**\n * RemoteDevice Interface represents a gate that can be controlled remotely,\n * and are installed physically at the entrance or exit of a residential area.\n * \n * @interface RemoteGate\n */\n\nimport { z } from \"zod\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface RemoteGate {\n    _id?: string;\n    residentialId: string;\n    name: string;\n    type: \"entrance\" | \"exit\";\n    thingName: string;\n    enabled?: boolean; // Optional field to indicate if the gate is enabled\n}\n\nexport const remoteGateSchema = z.object({\n    _id: z.string().transform(val => new ObjectId(val)).optional(),\n    residentialId: z.string().transform(val => new ObjectId(val)),\n    name: z.string(),\n    type: z.enum([\"entrance\", \"exit\"]),\n    thingName: z.string(),\n    enabled: z.boolean().optional(), // Optional field to indicate if the gate is enabled\n}).strict();\n\nexport type RemoteGateType = z.infer<typeof remoteGateSchema>;","import z from \"zod\";\nimport { RemoteGate, remoteGateSchema } from \"./remote-gate.interface\";\n\nexport interface UserSummary {\n    remoteGates: RemoteGate[];\n    currentPinAccess: string;\n    topicName: string;\n    // TODO: Add payment summary object\n}\n\nexport const userSummarySchema = z.object({\n    remoteGates: z.array(remoteGateSchema),\n    currentPinAccess: z.string().length(4, \"Current PIN must be 4 digits length\"),\n    topicName: z.string().min(1, \"Topic name cannot be empty\"),\n}).strict();\n\nexport type UserSummaryType = z.infer<typeof userSummarySchema>;","import { z } from \"zod\";\n\nexport interface Invoice {\n    id: string;\n    status: \"draft\" | \"open\" | \"paid\" | \"uncollectible\" | \"void\"; // Comes from https://docs.stripe.com/api/invoices/object?api-version=2025-05-28.basil#invoice_object-status\n    created: number; // Unix timestamp in that the invoice was created\n    total: number; // Total amount after discounts and taxes\n    ammount_remaining: number; // Amount due after discounts and taxes\n    customerId: string; // Customer ID from Stripe\n    description: string; // Optional description of the invoice\n    invoice_pdf?: string; // URL to the invoice PDF\n    collection_method: \"charge_automatically\" | \"send_invoice\"; // How the invoice will be paid\n    due_date?: number; // Optional, only if collection_method is \"send_invoice\"\n    days_until_due?: number; // Optional, only if collection_method is \"send_invoice\"\n    monthName: string; // Name of the month for which the invoice is generated\n    year: number; // Year for which the invoice is generated\n    paid_amount?: number; // Optional, amount paid by the customer\n}\n\nexport const invoiceSchema = z.object({\n    id: z.string(),\n    status: z.enum([\"draft\", \"open\", \"paid\", \"uncollectible\", \"void\"]),\n    created: z.number(),\n    total: z.number(),\n    ammount_remaining: z.number(),\n    customerId: z.string(),\n    description: z.string(),\n    invoice_pdf: z.string().url().optional(),\n    collection_method: z.enum([\"charge_automatically\", \"send_invoice\"]),\n    due_date: z.number().optional(), // Optional, only if collection_method is \"send_invoice\"\n    days_until_due: z.number().optional(), // Optional, only if collection_method is \"send_invoice\"\n    monthName: z.string(),\n    year: z.number().min(2000).max(2100), // Year must be a valid year\n    paid_amount: z.number().optional(), // Optional, amount paid by the customer\n}).strict();\n\nexport type InvoiceType = z.infer<typeof invoiceSchema>;","import { z } from \"zod\";\n\nexport interface PaymentMethod {\n    id: string; // Unique identifier for the payment method\n    type: \"card\" | \"bank_account\" | \"paypal\"; // Type of payment method\n    brand?: string; // Brand of the card (e.g., Visa, MasterCard) if applicable\n    last4?: string; // Last four digits of the card or bank account number\n    exp_month?: number; // Expiration month of the card if applicable\n    exp_year?: number; // Expiration year of the card if applicable\n}\n\nexport const paymentMethodSchema = z.object({\n    id: z.string(),\n    type: z.enum([\"card\", \"bank_account\", \"paypal\"]),\n    brand: z.string().optional(), // Optional, only for card type\n    last4: z.string().optional(), // Optional, only for card or bank account type\n    exp_month: z.number().optional(), // Optional, only for card type\n    exp_year: z.number().optional(), // Optional, only for card type\n}).strict();\n\nexport type PaymentMethodType = z.infer<typeof paymentMethodSchema>;","import { z } from \"zod\";\n\nexport interface InvoicePaymentIntent {\n    invoiceId: string;\n    paymentMethodId: string;\n}\n\nexport const invoicePaymentIntentSchema = z.object({\n    invoiceId: z.string(),\n    paymentMethodId: z.string().min(1, \"Payment method ID is required\"),\n}).strict();\n\nexport type InvoicePaymentIntentType = z.infer<typeof invoicePaymentIntentSchema>;","import { z } from \"zod\";\n\nexport interface VideoCallToken {\n  token: string;\n  roomName: string;\n}\n\nexport const videoCallTokenSchema = z.object({\n  token: z.string(),\n  roomName: z.string(),\n});\n\nexport type VideoCallTokenType = z.infer<typeof videoCallTokenSchema>;","import { z } from \"zod\";\n\nexport interface AutomaticCharge {\n    customerId: string;\n    collectionMethod: \"charge_automatically\" | \"send_invoice\";\n    paymentMethodId?: string;\n}\n\nexport const automaticChargeSchema = z.object({\n    customerId: z.string(),\n    collectionMethod: z.enum([\"charge_automatically\", \"send_invoice\"]),\n    paymentMethodId: z.string().optional(),\n}).strict();\n\nexport type AutomaticChargeType = z.infer<typeof automaticChargeSchema>;","export const enum InvitationDurationEnum {\n    ONE_HOUR = \"1 hour\",\n    TWO_HOURS = \"2 hours\",\n    FOUR_HOURS = \"4 hours\",\n    SIX_HOURS = \"6 hours\",\n    TWELVE_HOURS = \"12 hours\",\n    ONE_DAY = \"1 day\",\n    TWO_DAYS = \"2 days\",\n    THREE_DAYS = \"3 days\",\n    ONE_WEEK = \"1 week\",\n    TWO_WEEKS = \"2 weeks\",\n    ONE_MONTH = \"1 month\",\n    THREE_MONTHS = \"3 months\",\n}","export const enum InvitationTypeEnum {\n    QR = \"qr\",\n    PIN = \"pin\",\n}","import { z } from \"zod\";\n\nexport const enum BasicUserTypeEnum {\n     REGISTERED_USER = \"registeredUser\",\n     GUEST_USER = \"guestUser\",\n}\n\nexport const basicUserTypeEnumSchema = z.enum([\"registeredUser\", \"guestUser\"]);\n\nexport interface BasicUserInfo {\n  id: string;\n  name: string;\n  avatarUrl: string;\n  type: BasicUserTypeEnum;\n}\n\nexport const BasicUserInfoSchema = z.object({\n  id: z.string().uuid(),\n  name: z.string(),\n  avatarUrl: z.string().url(),\n  type: basicUserTypeEnumSchema,\n}).strict();\n\nexport type BasicUserInfoType = z.infer<typeof BasicUserInfoSchema>;","import { ObjectId } from \"mongodb\";\nimport { z } from \"zod\";\n\nexport interface Guest {\n    _id?: ObjectId; // Unique identifier for the guest\n    userSub: string; // User ID of the guest (usually the host)\n    name: string; // Name of the guest\n    avatarUrl: string; // URL of the guest's avatar image\n    isoCreatedOn: string; // Date when the guest was created\n}\n\nexport const guestSchema = z.object({\n    _id: z.string().transform(val => new ObjectId(val)).optional(),\n    userSub: z.string().uuid(),\n    name: z.string(),\n    avatarUrl: z.string().url(),\n    isoCreatedOn: z.string().datetime(),\n});\n\nexport type GuestType = z.infer<typeof guestSchema>;","export enum UserRoleEnum {\n    HOUSE_OWNER = \"houseOwner\",\n    HOUSE_RELATED = \"houseRelated\",\n    HELP_DESK = \"helpDesk\",\n    ADMIN = \"admin\"\n}"],"mappings":"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","names":["ObjectId","z","z","z","z","ObjectId","z","ObjectId","z","z","z","z","z","z","z","InvitationDurationEnum","InvitationTypeEnum","z","BasicUserTypeEnum","ObjectId","z","UserRoleEnum"]}