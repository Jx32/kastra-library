{"version":3,"sources":["../src/constants/constants.ts","../src/dto/user.interface.ts","../src/dto/patch-user.interface.ts","../src/dto/residential.interface.ts","../src/dto/remote-opening-action.interface.ts","../src/dto/remote-device.interface.ts","../src/enum/role.enum.ts"],"sourcesContent":["export const PHONE_REGEX = /^(\\+[1-9]{2})\\d{10}$/;\nexport const MONGODB_ID_REGEX = /^[a-f\\d]{24}$/i;","import { z } from \"zod\";\nimport { PHONE_REGEX } from \"../constants/constants\";\n\nexport interface User {\n    sub?: string;\n    username?: string;\n    name: string;\n    email: string;\n    email_verified?: boolean;\n    phone_number?: string;\n    phone_number_verified?: boolean;\n    firstLogin: boolean;\n    houseNumber: string;\n    role: \"houseOwner\" | \"houseRelated\" | \"helpDesk\" | \"admin\";\n    street: string;\n    residentialId: string;\n    houseOwnerSub?: string;\n}\n\nexport const userSchema = z.object({\n    sub: z.string().uuid().optional(),\n    username: z.string().optional(),\n    name: z.string(),\n    email: z.string().email(),\n    email_verified: z.boolean().optional(),\n    phone_number: z.string().regex(PHONE_REGEX).optional(),\n    phone_number_verified: z.boolean().optional(),\n    firstLogin: z.boolean(),\n    houseNumber: z.string(),\n    role: z.enum([\"houseOwner\", \"houseRelated\", \"helpDesk\", \"admin\"]),\n    street: z.string(),\n    residentialId: z.string(),\n    houseOwnerSub: z.string().uuid().optional(),\n}).strict();\n\nexport type UserType = z.infer<typeof userSchema>;","import { z } from \"zod\";\nimport { PHONE_REGEX } from \"../constants/constants\";\n\nexport interface PatchUser {\n    name?: string;\n    email?: string;\n    phone_number?: string;\n    firstLogin?: boolean;\n    houseNumber?: string;\n    street?: string;\n}\n\nexport const patchUserSchema = z.object({\n    name: z.string().optional(),\n    email: z.string().email().optional(),\n    phone_number: z.string().regex(PHONE_REGEX).optional(),\n    firstLogin: z.boolean().optional(),\n    houseNumber: z.string().optional(),\n    street: z.string().optional(),\n}).strict();\n\nexport type PatchUserType = z.infer<typeof patchUserSchema>;","/**\n * Residential interface represents a residential area where remote devices are installed,\n * and where users can live or have a house.\n * \n * @interface Residential\n */\n\nimport z from \"zod\";\nimport { MONGODB_ID_REGEX } from \"../constants/constants\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface Residential {\n    _id: string;\n    name: string;\n    address: string;\n    city: string;\n    state: string;\n    country: string;\n    postalCode: string;\n    contactNumber?: string;\n    status: \"active\" | \"inactive\";\n}\n\nexport const residentialSchema = z.object({\n    _id: z.string().transform(val => new ObjectId(val)).optional(),\n    name: z.string(),\n    address: z.string(),\n    city: z.string(),\n    state: z.string(),\n    country: z.string(),\n    postalCode: z.string(),\n    contactNumber: z.string().optional(),\n    status: z.enum([\"active\", \"inactive\"]),\n}).strict();\n\nexport type ResidentialType = z.infer<typeof residentialSchema>;","/**\n * RemoteOpeningAction interface represents an action that will be performed on a remote device,\n * such as opening or closing a gate, and includes metadata about the action.\n * Also can be used to log actions performed by users or systems.\n * \n * Those actions will be used to control devices like gates, doors, etc.,\n * and can be triggered by users or automated systems.\n * \n * A remote opening action it's indentended to be in the residential MQTT topic.\n * \n * @interface RemoteOpeningAction\n */\n\nimport z from \"zod\";\nimport { MONGODB_ID_REGEX } from \"../constants/constants\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface RemoteOpeningAction {\n    remoteDeviceId: string;\n    action: \"open\" | \"close\";\n    timestamp: string; // ISO 8601 format\n    userSub: string; // Optional, if the action is performed by a user\n    reason?: string; // Optional, for logging purposes\n    additionalInfo?: any; // Optional, for any extra information\n}\n\nexport const remoteOpeningActionSchema = z.object({\n    remoteDeviceId: z.string().transform(val => new ObjectId(val)).optional(),\n    action: z.enum([\"open\", \"close\"]),\n    timestamp: z.string().refine((val) => !isNaN(Date.parse(val)), {\n        message: \"Invalid timestamp format, must be ISO 8601\",\n    }),\n    userSub: z.string().uuid(),\n    reason: z.string().optional(),\n    additionalInfo: z.any().optional(),\n}).strict();\n\nexport type RemoteOpeningActionType = z.infer<typeof remoteOpeningActionSchema>;","/**\n * RemoteDevice Interface represents a device that can be controlled remotely,\n * and are installed physically at the entrance or exit of a residential area.\n * \n * @interface RemoteDevice\n */\n\nimport { z } from \"zod\";\nimport { MONGODB_ID_REGEX } from \"../constants/constants\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface RemoteDevice {\n    _id?: string;\n    residentialId: string;\n    name: string;\n    type: \"entranceGate\" | \"exitGate\";\n}\n\nexport const remoteDeviceSchema = z.object({\n    _id: z.string().transform(val => new ObjectId(val)).optional(),\n    residentialId: z.string().regex(MONGODB_ID_REGEX, \"Invalid residential ID format, must be a valid hex value\"),\n    name: z.string(),\n    type: z.enum([\"entranceGate\", \"exitGate\"]),\n}).strict();\n\nexport type RemoteDeviceType = z.infer<typeof remoteDeviceSchema>;","export enum UserRoleEnum {\n    HOUSE_OWNER = \"houseOwner\",\n    HOUSE_RELATED = \"houseRelated\",\n    HELP_DESK = \"helpDesk\",\n    ADMIN = \"admin\"\n}"],"mappings":"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","names":["z","z","z","z","ObjectId","z","ObjectId","z","UserRoleEnum"]}